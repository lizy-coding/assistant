plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
}

android {
    namespace 'com.example.image_analysis'
    compileSdk 35

    defaultConfig {
        minSdk 24
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    
    // 添加 buildFeatures 以启用 BuildConfig
    buildFeatures {
        buildConfig true
    }
}

dependencies {
    // 基础库
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    implementation(libs.androidx.constraintlayout)
    
    // CameraX 依赖
    implementation(libs.camera.core)
    implementation(libs.camera.camera2)
    implementation(libs.androidx.camera.lifecycle)
    implementation(libs.androidx.camera.view)
    implementation(libs.androidx.lifecycle.common.jvm)
    implementation(libs.androidx.exifinterface)
    
    // 网络相关
    implementation(libs.retrofit.core)
    implementation(libs.retrofit.gson)
    implementation(libs.okhttp)
    
    // 阿里云图像识别
    implementation(libs.image.sdk)
    
    // 解决 XML 库冲突
    implementation(libs.dom4j)
    
    // 测试依赖
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    
    // 配置冲突解决
    configurations.all {
        // 排除冲突的 XML 相关库
        exclude group: 'com.sun.xml.bind', module: 'jaxb-core'
        exclude group: 'com.sun.xml.bind', module: 'jaxb-impl'
        exclude group: 'xml-apis', module: 'xml-apis'
    }
}

def getLocalProperty(key) {
    def localFile = project.rootProject.file("local.properties")
    if (!localFile.exists()) {
        throw new FileNotFoundException("local.properties文件未找到，路径：${localFile.absolutePath}")
    }

    def localProperties = new Properties()
    localProperties.load(new FileInputStream(localFile))
    return localProperties.getProperty(key, "")
}

// 添加至文件末尾
task printAliyunConfig {
    doLast {
        def id = android.defaultConfig.buildConfigFields.get("ALIYUN_ACCESS_KEY_ID")?.value
        def secret = android.defaultConfig.buildConfigFields.get("ALIYUN_ACCESS_KEY_SECRET")?.value

        println "模块配置验证："
        println "AccessKey ID   : ${id?.replaceAll('.', '*')}" // 安全脱敏显示
        println "AccessKey Secret: ${secret?.replaceAll('.', '*')}"
        println "ID长度: ${id?.length() ?: 0}"
        println "Secret长度: ${secret?.length() ?: 0}"
    }
}


