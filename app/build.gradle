plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
}

android {
    namespace 'com.example.assistant'
    compileSdk 35

    defaultConfig {
        applicationId "com.example.assistant"
        minSdk 30
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // 启用 MultiDex
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    kotlinOptions {
        jvmTarget = '17'
    }
    
    buildFeatures {
        compose true
        viewBinding true
    }
    
    composeOptions {
        kotlinCompilerExtensionVersion "1.5.1"
    }
    
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // AndroidX 核心库
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    implementation(libs.androidx.constraintlayout)
    
    // Compose 依赖
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    // 明确添加 Compose Runtime
    implementation(libs.androidx.compose.runtime)
    implementation(libs.androidx.compose.material)
    
    // 测试库
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    
    // MultiDex 支持
    implementation(libs.multidex)
    
    // 模块依赖
    implementation(project(":speech_recognition"))
    implementation(project(":image_analysis"))
    implementation project(':biometric_auth')
    implementation project(':push_notification')
    
    // 排除冲突的依赖
    configurations.configureEach {
        exclude group: 'dom4j', module: 'dom4j'
        exclude group: 'xml-apis', module: 'xml-apis'
        exclude group: 'pull-parser', module: 'pull-parser'
    }
    
    // 可选：强制使用更高版本
    implementation libs.dom4j

    configurations.all {
        // 排除冲突的 XML 相关库
        exclude group: 'com.sun.xml.bind', module: 'jaxb-core'
        exclude group: 'com.sun.xml.bind', module: 'jaxb-impl'
        exclude group: 'xml-apis', module: 'xml-apis'
        exclude group: 'pull-parser', module: 'pull-parser'
        exclude group: 'dom4j', module: 'dom4j'
    }

    // 在依赖部分确保直接添加Material库
    implementation libs.material
}

// 项目根目录/build.gradle
allprojects {

    configurations.configureEach {
        exclude group: 'dom4j', module: 'dom4j'  // 彻底屏蔽旧版

        resolutionStrategy {
            // 强制使用正确的版本
            force 'xml-apis:xml-apis:1.4.01'
            force 'xerces:xercesImpl:2.12.2'  // 不使用 `using()`，而是 `force`
            force 'xpp3:xpp3:1.1.4c'
            // 保留其他强制版本规则
            force 'org.bouncycastle:bcprov-jdk18on:1.78.1'
            force 'com.sun.xml.bind:jaxb-core:4.0.5'
            force 'org.glassfish.jaxb:txw2:4.0.5'
            force 'org.dom4j:dom4j:2.1.3'
            force 'javax.xml.bind:jaxb-api:2.3.1'
            force 'com.sun.xml.bind:jaxb-core:2.3.0.1'
            force 'com.sun.xml.bind:jaxb-impl:2.3.1'

        }
    }

}

